buildscript {
    repositories {
        mavenLocal()
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

repositories {
    mavenLocal()
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
}

apply plugin: "kotlin-multiplatform"

kotlin {
    jvm("backend")
    js("frontend") {
        compilations.main.kotlinOptions {
            moduleKind = "umd"
            sourceMap = true
            metaInfo = true
        }

        compilations*.kotlinOptions {
            moduleKind = "umd"
            sourceMap = true
            metaInfo = true
        }
    }

    sourceSets {
        commonMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-common"
        }
        commonTest.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
            implementation "org.jetbrains.kotlin:kotlin-test-common"
        }
        backendMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

            implementation "io.ktor:ktor-server-netty:$ktor_version"
            implementation "io.ktor:ktor-html-builder:$ktor_version"
            implementation "ch.qos.logback:logback-classic:$logback_version"
        }
        backendTest.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-test"
            implementation "org.jetbrains.kotlin:kotlin-test-junit"
        }
        frontendMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-js"
        }
        frontendTest.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-test-js"
        }
    }
}

def webFolder = new File(project.buildDir, "../src/frontendMain/web")
def frontendCompilations = kotlin.targets.frontend.compilations

task populateWebFolder(dependsOn: frontendMainClasses) {
    doLast {
        copy {
            from frontendCompilations.main.output
            from kotlin.sourceSets.frontendMain.resources.srcDirs
            frontendCompilations.test.runtimeDependencyFiles.each {
                if (it.exists() && !it.isDirectory()) {
                    from zipTree(it.absolutePath).matching { include "*.js" }
                }
            }
            into webFolder
        }
    }
}

frontendJar.dependsOn(populateWebFolder)

task run(type: JavaExec, dependsOn: [backendMainClasses, frontendJar]) {
    //main = "io.ktor.samples.fullstack.backend.BackendCodeKt"
    main = "io.ktor.server.netty.DevelopmentEngine"
    classpath {
        [kotlin.targets.backend.compilations.main.output.files, configurations.backendRuntimeClasspath]
    }
    args = []
}
