buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url 'https://plugins.gradle.org/m2/' }
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'kotlin-multiplatform'

kotlin {
    targets {
        fromPreset(presets.jvm, 'backend')
        fromPreset(presets.js, 'frontend') {
            [tasks.getByName(compilations.main.compileKotlinTaskName), tasks.getByName(compilations.test.compileKotlinTaskName)]*.kotlinOptions {
                languageVersion = "1.3"
                moduleKind = "umd"
                sourceMap = true
                metaInfo = true
            }
        }
    }
    sourceSets {
        backendMain
        frontendMain
    }
}

repositories {
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
}

dependencies {
    backendMainImplementation "io.ktor:ktor-server-netty:$ktor_version"
    backendMainImplementation "io.ktor:ktor-html-builder:$ktor_version"
    backendMainImplementation "ch.qos.logback:logback-classic:$logback_version"

    commonMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-common"
    commonTestImplementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
    commonTestImplementation "org.jetbrains.kotlin:kotlin-test-common"

    frontendMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-js"
    frontendTestImplementation "org.jetbrains.kotlin:kotlin-test-js"

    backendMainImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    backendTestImplementation "org.jetbrains.kotlin:kotlin-test"
    backendTestImplementation "org.jetbrains.kotlin:kotlin-test-junit"
}


def webFolder = new File(project.buildDir, "../src/frontendMain/web")
def frontendCompilations = kotlin.targets.frontend.compilations

task populateWebFolder(dependsOn: [frontendMainClasses]) {
    doLast {
        copy {
            from frontendCompilations.main.output
            from kotlin.sourceSets.frontendMain.resources.srcDirs
            frontendCompilations.test.runtimeDependencyFiles.each {
                if (it.exists() && !it.isDirectory()) {
                    from zipTree(it.absolutePath).matching { include '*.js' }
                }
            }
            into webFolder
        }
    }
}

frontendJar.dependsOn(populateWebFolder)

task run(type: JavaExec, dependsOn: [backendMainClasses, frontendJar]) {
    //main = "io.ktor.samples.fullstack.backend.BackendCodeKt"
    main = "io.ktor.server.netty.DevelopmentEngine"
    classpath { [
            kotlin.targets.backend.compilations.main.output.files,
            configurations.backendRuntimeClasspath,
    ] }
    args = []
}
